{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","console","log","this","movie","key","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gTAgCeA,MA5Bf,YAAwD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC1C,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UAAUD,EAAOI,KAAI,SAACC,EAAOC,QAM3C,uBAAGL,UAAU,kBAAkBH,MC8BhCS,G,kNAzCbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAC6BC,IAAMC,IAAI,6CADvC,gBACWJ,EADX,EACHK,KAAOA,KAAOL,OAErB,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAClCQ,QAAQC,IAAIR,GAJF,2C,kEAOVS,KAAKR,c,+BAGG,IAAD,EACqBQ,KAAKX,MAA1BC,EADA,EACAA,UAAWC,EADX,EACWA,OAClB,OACE,6BAAST,UAAU,aAChBQ,EACC,yBAAKR,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZS,EAAON,KAAI,SAAAgB,GAAK,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAME,GACXA,GAAIF,EAAME,GACV1B,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMG,mBACdvB,OAAQoB,EAAMpB,kB,GAjCVwB,IAAMC,YCDxBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.2c2e5cac.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction Movie({year, title, summary, poster, genres}) { //id값 필요없음\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title} />\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h3 className=\"movie__year\">{year}</h3>\n                <ul className=\"genres\">{genres.map((genre, index) => ( //key가 필요한데 map이 넘겨주는 index를 사용하면 된다.\n                    <li key={index} className=\"genres__genre\">\n                        {genre}\n                    </li>\n                ))}\n                </ul>\n                <p className=\"movie__summary\">{summary}</p>\n            </div>\n        </div>\n    );\n}\n\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component { //class component\n  state = {\n    isLoading: true,\n    movies: []//movie state 생성\n  };\n  getMovies = async () => {\n    const {data: {data: {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    // this.setState({movies:movies})\n    this.setState({movies, isLoading: false}) //위와 동일. 단축해서 쓸 수 있다.\n    console.log(movies); //object구조에 따라 data내의 data내의 movies 목록을 가져옴\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    const {isLoading, movies} = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n            <Movie \n              key={movie.id} //child는 유일한 key값을 가지고 있어야한다. react가 식별하기 위한\n              id={movie.id} \n              year={movie.year} \n              title={movie.title} \n              summary={movie.summary} \n              poster={movie.medium_cover_image}\n              genres={movie.genres}\n            />\n            ))}\n      </div>\n    )}\n    </section>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}